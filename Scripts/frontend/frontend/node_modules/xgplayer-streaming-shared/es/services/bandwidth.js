import { createClass as _createClass, classCallCheck as _classCallCheck, defineProperty as _defineProperty } from "../_virtual/_rollupPluginBabelHelpers.js";
var SKIP_SMALL_CHUNK = 1e3;
var MAX_CHUNK_SAVE_SIZE = 50;
var MAX_SEGMENT_SAVE_SIZE = 3;
var LONGTIME_NO_RECEIVE = 3e3;
var BandwidthService = /* @__PURE__ */ function() {
  function BandwidthService2(opts) {
    _classCallCheck(this, BandwidthService2);
    _defineProperty(this, "_chunkSpeed", 0);
    _defineProperty(this, "_chunkCache", []);
    _defineProperty(this, "_speeds", []);
    _defineProperty(this, "_totalSize", 0);
    _defineProperty(this, "_totalCost", 0);
    this._opts = opts || {};
  }
  _createClass(BandwidthService2, [{
    key: "addRecord",
    value: function addRecord(totalByte, ms) {
      if (!totalByte || !ms)
        return;
      this._speeds.push(8e3 * totalByte / ms);
      this._speeds = this._speeds.slice(-MAX_SEGMENT_SAVE_SIZE);
    }
  }, {
    key: "addChunkRecord",
    value: function addChunkRecord(totalByte, ms) {
      var _this$_opts, _this$_opts2;
      if (!totalByte || !ms || totalByte < (((_this$_opts = this._opts) === null || _this$_opts === void 0 ? void 0 : _this$_opts.skipChunkSize) || SKIP_SMALL_CHUNK))
        return;
      this._totalSize += totalByte;
      this._totalCost += ms;
      this._chunkSpeed = 8e3 * totalByte / ms;
      this._chunkCache.push({
        size: totalByte,
        duration: ms,
        timestamp: performance.now()
      });
      var size = ((_this$_opts2 = this._opts) === null || _this$_opts2 === void 0 ? void 0 : _this$_opts2.chunkCountForSpeed) || MAX_CHUNK_SAVE_SIZE;
      if (this._chunkCache.length > size) {
        this._chunkCache = this._chunkCache.slice(-size);
      }
    }
  }, {
    key: "getAvgSpeed",
    value: function getAvgSpeed() {
      var _this$_opts3;
      if (!this._chunkCache.length && !this._speeds.length)
        return 0;
      if (this._speeds.length) {
        return this._speeds.reduce(function(a, c) {
          return a += c;
        }) / this._speeds.length;
      }
      var lastSample = this._chunkCache[this._chunkCache.length - 1];
      var cost = performance.now() - lastSample.timestamp;
      if (cost > (((_this$_opts3 = this._opts) === null || _this$_opts3 === void 0 ? void 0 : _this$_opts3.longtimeNoReceived) || LONGTIME_NO_RECEIVE)) {
        this._chunkCache.push({
          size: 0,
          duration: cost,
          timestamp: performance.now()
        });
      }
      var totalSize = this._chunkCache.reduce(function(a, c) {
        return a += c.size;
      }, 0);
      var totalDuration = this._chunkCache.reduce(function(a, c) {
        return a += c.duration;
      }, 0);
      return 8e3 * totalSize / totalDuration;
    }
  }, {
    key: "getLatestSpeed",
    value: function getLatestSpeed() {
      if (!this._chunkCache.length && !this._speeds.length)
        return 0;
      if (this._speeds.length) {
        return this._speeds[this._speeds.length - 1];
      }
      return this._chunkSpeed;
    }
  }, {
    key: "getTotalSize",
    value: function getTotalSize() {
      return this._totalSize;
    }
  }, {
    key: "getTotalCost",
    value: function getTotalCost() {
      return this._totalCost;
    }
  }, {
    key: "reset",
    value: function reset() {
      this._chunkCache = [];
      this._speeds = [];
      this._totalSize = 0;
      this._totalCost = 0;
    }
  }]);
  return BandwidthService2;
}();
export { BandwidthService };
